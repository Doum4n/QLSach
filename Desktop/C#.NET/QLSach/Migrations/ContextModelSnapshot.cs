// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLSach.database;

#nullable disable

namespace QLSach.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("QLSach.database.models.Photo", b =>
                {
                    b.Property<string>("path")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.HasKey("path");

                    b.HasIndex("book_id")
                        .IsUnique();

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            path = "2fake path",
                            book_id = 1
                        },
                        new
                        {
                            path = "3fake path",
                            book_id = 2
                        },
                        new
                        {
                            path = "4fake path",
                            book_id = 3
                        },
                        new
                        {
                            path = "5fake path",
                            book_id = 4
                        },
                        new
                        {
                            path = "6fake path",
                            book_id = 5
                        },
                        new
                        {
                            path = "7fake path",
                            book_id = 6
                        },
                        new
                        {
                            path = "8fake path",
                            book_id = 7
                        },
                        new
                        {
                            path = "9fake path",
                            book_id = 8
                        },
                        new
                        {
                            path = "10fake path",
                            book_id = 9
                        },
                        new
                        {
                            path = "11fake path",
                            book_id = 10
                        },
                        new
                        {
                            path = "12fake path",
                            book_id = 11
                        },
                        new
                        {
                            path = "13fake path",
                            book_id = 12
                        },
                        new
                        {
                            path = "14fake path",
                            book_id = 13
                        },
                        new
                        {
                            path = "15fake path",
                            book_id = 14
                        },
                        new
                        {
                            path = "16fake path",
                            book_id = 15
                        },
                        new
                        {
                            path = "17fake path",
                            book_id = 16
                        });
                });

            modelBuilder.Entity("QLSach.dbContext.models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("author_id")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            id = 1,
                            author_id = 1,
                            name = "Eligendi eaque error tenetur."
                        },
                        new
                        {
                            id = 2,
                            author_id = 2,
                            name = "Esse excepturi sunt."
                        },
                        new
                        {
                            id = 3,
                            author_id = 3,
                            name = "Ratione a reprehenderit laudantium non nesciunt animi aut voluptatem."
                        },
                        new
                        {
                            id = 4,
                            author_id = 4,
                            name = "Libero modi rerum dicta ut."
                        },
                        new
                        {
                            id = 5,
                            author_id = 5,
                            name = "Et tempora exercitationem alias eligendi nobis quia."
                        },
                        new
                        {
                            id = 6,
                            author_id = 6,
                            name = "Aperiam laboriosam numquam excepturi et at ea et excepturi ea."
                        },
                        new
                        {
                            id = 7,
                            author_id = 7,
                            name = "Repudiandae dolorum numquam."
                        },
                        new
                        {
                            id = 8,
                            author_id = 8,
                            name = "Soluta quod praesentium placeat corrupti."
                        },
                        new
                        {
                            id = 9,
                            author_id = 9,
                            name = "Veritatis corporis deserunt accusamus delectus rerum exercitationem doloribus."
                        },
                        new
                        {
                            id = 10,
                            author_id = 10,
                            name = "Debitis repellat expedita provident numquam ipsum enim sunt id quo."
                        },
                        new
                        {
                            id = 11,
                            author_id = 11,
                            name = "Dolore itaque asperiores qui libero deleniti."
                        },
                        new
                        {
                            id = 12,
                            author_id = 12,
                            name = "Harum enim voluptas."
                        },
                        new
                        {
                            id = 13,
                            author_id = 13,
                            name = "Sequi pariatur vel et non et fugiat recusandae voluptas."
                        },
                        new
                        {
                            id = 14,
                            author_id = 14,
                            name = "Rerum deserunt nisi officia consequatur quibusdam animi laborum et est."
                        },
                        new
                        {
                            id = 15,
                            author_id = 15,
                            name = "Ut quaerat et ratione est rem aperiam blanditiis."
                        },
                        new
                        {
                            id = 16,
                            author_id = 16,
                            name = "Reprehenderit explicabo quae."
                        });
                });

            modelBuilder.Entity("QLSach.dbContext.models.author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Tempora consequatur est.",
                            name = "Dewayne"
                        },
                        new
                        {
                            id = 2,
                            description = "A corporis molestiae soluta totam ut temporibus.",
                            name = "Lorena"
                        },
                        new
                        {
                            id = 3,
                            description = "Sint sint perferendis.",
                            name = "Pedro"
                        },
                        new
                        {
                            id = 4,
                            description = "Error vel tenetur dolorum necessitatibus.",
                            name = "Constantin"
                        },
                        new
                        {
                            id = 5,
                            description = "Iusto quis culpa voluptas omnis.",
                            name = "Marilie"
                        },
                        new
                        {
                            id = 6,
                            description = "Ut consequatur sunt ut iure quam laudantium minus.",
                            name = "Ron"
                        },
                        new
                        {
                            id = 7,
                            description = "Minus cupiditate consequatur expedita inventore.",
                            name = "Dallas"
                        },
                        new
                        {
                            id = 8,
                            description = "Eius impedit expedita.",
                            name = "Meredith"
                        },
                        new
                        {
                            id = 9,
                            description = "Praesentium nihil et officiis quo.",
                            name = "Pietro"
                        },
                        new
                        {
                            id = 10,
                            description = "Quasi asperiores omnis natus dolores voluptatem animi iusto quos velit.",
                            name = "Elenor"
                        },
                        new
                        {
                            id = 11,
                            description = "Distinctio veritatis nihil alias necessitatibus ut ut ducimus.",
                            name = "Eve"
                        },
                        new
                        {
                            id = 12,
                            description = "Saepe ab est eum rerum nisi.",
                            name = "Quinten"
                        },
                        new
                        {
                            id = 13,
                            description = "Et voluptate reiciendis deleniti.",
                            name = "Hermina"
                        },
                        new
                        {
                            id = 14,
                            description = "Aut et autem sunt error ut.",
                            name = "Arthur"
                        },
                        new
                        {
                            id = 15,
                            description = "Nisi quisquam magnam minus et.",
                            name = "Lavada"
                        },
                        new
                        {
                            id = 16,
                            description = "Amet at enim sit dolore.",
                            name = "Jaime"
                        });
                });

            modelBuilder.Entity("QLSach.database.models.Photo", b =>
                {
                    b.HasOne("QLSach.dbContext.models.Book", "Book")
                        .WithOne("photo")
                        .HasForeignKey("QLSach.database.models.Photo", "book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("QLSach.dbContext.models.Book", b =>
                {
                    b.HasOne("QLSach.dbContext.models.author", "author")
                        .WithOne("Book")
                        .HasForeignKey("QLSach.dbContext.models.Book", "author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("QLSach.dbContext.models.Book", b =>
                {
                    b.Navigation("photo");
                });

            modelBuilder.Entity("QLSach.dbContext.models.author", b =>
                {
                    b.Navigation("Book");
                });
#pragma warning restore 612, 618
        }
    }
}
