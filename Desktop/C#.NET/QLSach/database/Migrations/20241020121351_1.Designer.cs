// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QLSach.database;

#nullable disable

namespace QLSach.database.migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241020121351_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("QLSach.database.models.Photo", b =>
                {
                    b.Property<string>("path")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.HasKey("path");

                    b.HasIndex("book_id")
                        .IsUnique();

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("QLSach.dbContext.models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("author_id")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            id = 1,
                            author_id = 1,
                            name = "Assumenda fugiat voluptas voluptatibus repellendus eveniet ut expedita."
                        },
                        new
                        {
                            id = 2,
                            author_id = 2,
                            name = "Ut non delectus qui dolor placeat id similique.\nAsperiores molestias numquam ea voluptates est quasi dolor.\nIusto labore voluptate debitis nemo.\nFacilis at ipsa ratione quisquam delectus neque provident fugit."
                        },
                        new
                        {
                            id = 3,
                            author_id = 3,
                            name = "voluptatem"
                        },
                        new
                        {
                            id = 4,
                            author_id = 4,
                            name = "Occaecati ullam hic dolorem laudantium aspernatur sint. Consequatur enim optio praesentium. Maxime occaecati voluptatibus blanditiis accusantium harum."
                        },
                        new
                        {
                            id = 5,
                            author_id = 5,
                            name = "Beatae aut voluptatibus eaque.\nVoluptas accusantium laudantium modi incidunt.\nAccusantium voluptates autem aliquid error doloribus illum possimus et."
                        },
                        new
                        {
                            id = 6,
                            author_id = 6,
                            name = "aspernatur"
                        },
                        new
                        {
                            id = 7,
                            author_id = 7,
                            name = "Qui eaque nemo."
                        },
                        new
                        {
                            id = 8,
                            author_id = 8,
                            name = "Perferendis ut officia."
                        },
                        new
                        {
                            id = 9,
                            author_id = 9,
                            name = "Et atque vero et et unde non est rerum.\nEst deleniti natus.\nMaxime ea perferendis aut iure quam.\nEligendi placeat quia accusantium quis quo eligendi rem.\nDeleniti dolorem quasi exercitationem voluptatem sequi tempora magnam assumenda."
                        },
                        new
                        {
                            id = 10,
                            author_id = 10,
                            name = "Nulla veniam rerum eligendi et.\nEt et commodi quaerat ipsum.\nSed dolor sed sunt voluptatem sint sit dolor facere.\nUt dolorem voluptatem ex tempore quo maiores totam omnis."
                        },
                        new
                        {
                            id = 11,
                            author_id = 11,
                            name = "Laudantium sapiente quod blanditiis molestiae et illum."
                        },
                        new
                        {
                            id = 12,
                            author_id = 12,
                            name = "quae"
                        },
                        new
                        {
                            id = 13,
                            author_id = 13,
                            name = "provident"
                        },
                        new
                        {
                            id = 14,
                            author_id = 14,
                            name = "Corrupti et modi aperiam esse.\nEt tempora impedit sunt itaque doloribus.\nFacere in voluptatem.\nVitae accusantium error dolorem.\nRepellendus harum in odio illum ipsa voluptatem quo quas qui.\nIpsam inventore nemo."
                        },
                        new
                        {
                            id = 15,
                            author_id = 15,
                            name = "Quaerat similique quis dolorem adipisci eum.\nEst nisi excepturi necessitatibus odio molestias ut.\nUt explicabo error et quia et sequi corrupti cum culpa.\nArchitecto optio veritatis voluptatum et et quam."
                        },
                        new
                        {
                            id = 16,
                            author_id = 16,
                            name = "dolor"
                        });
                });

            modelBuilder.Entity("QLSach.dbContext.models.author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Occaecati ut beatae et.",
                            name = "Mara"
                        },
                        new
                        {
                            id = 2,
                            description = "Corporis mollitia quasi laboriosam ut.",
                            name = "Camren"
                        },
                        new
                        {
                            id = 3,
                            description = "Suscipit consequuntur aliquam blanditiis consequatur explicabo pariatur porro delectus.",
                            name = "Marlon"
                        },
                        new
                        {
                            id = 4,
                            description = "Accusantium eos aut perferendis doloremque et.",
                            name = "Unique"
                        },
                        new
                        {
                            id = 5,
                            description = "Non commodi nihil non.",
                            name = "Jaden"
                        },
                        new
                        {
                            id = 6,
                            description = "Consequatur nobis maiores eos optio voluptatem maiores.",
                            name = "Nathaniel"
                        },
                        new
                        {
                            id = 7,
                            description = "Culpa praesentium non veniam.",
                            name = "Violet"
                        },
                        new
                        {
                            id = 8,
                            description = "Eum ut aut consectetur odio minima ut aspernatur.",
                            name = "Lamar"
                        },
                        new
                        {
                            id = 9,
                            description = "Libero sed id quia.",
                            name = "Nora"
                        },
                        new
                        {
                            id = 10,
                            description = "Est omnis et qui est et dicta occaecati molestiae.",
                            name = "Savanna"
                        },
                        new
                        {
                            id = 11,
                            description = "Error ut itaque at doloremque ad.",
                            name = "Petra"
                        },
                        new
                        {
                            id = 12,
                            description = "Aut quidem autem numquam soluta.",
                            name = "Gaetano"
                        },
                        new
                        {
                            id = 13,
                            description = "Rerum modi rem.",
                            name = "Ellie"
                        },
                        new
                        {
                            id = 14,
                            description = "Placeat pariatur sint.",
                            name = "Jadon"
                        },
                        new
                        {
                            id = 15,
                            description = "Ullam tempore amet quis sapiente sunt.",
                            name = "Alison"
                        },
                        new
                        {
                            id = 16,
                            description = "Quidem ab blanditiis eaque aut consectetur numquam dolor deleniti impedit.",
                            name = "Maxwell"
                        });
                });

            modelBuilder.Entity("QLSach.database.models.Photo", b =>
                {
                    b.HasOne("QLSach.dbContext.models.Book", "Book")
                        .WithOne("photo")
                        .HasForeignKey("QLSach.database.models.Photo", "book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("QLSach.dbContext.models.Book", b =>
                {
                    b.HasOne("QLSach.dbContext.models.author", "author")
                        .WithOne("Book")
                        .HasForeignKey("QLSach.dbContext.models.Book", "author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("QLSach.dbContext.models.Book", b =>
                {
                    b.Navigation("photo");
                });

            modelBuilder.Entity("QLSach.dbContext.models.author", b =>
                {
                    b.Navigation("Book");
                });
#pragma warning restore 612, 618
        }
    }
}
